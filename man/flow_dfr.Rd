% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flow-dfr.R
\name{flow_dfr}
\alias{flow_dfr}
\title{Row-wise caching of operations on data frame.}
\usage{
flow_dfr(..., fn = NULL, fn_id = NULL, flow_options = get_flow_options())
}
\arguments{
\item{...}{Named arguments to pass to \code{fn}. The first argument must be 
a \code{data.frame} or \code{tibble}. Row names are not supported.}

\item{fn}{The function to apply to the data frame. It must accept a data
frame as the first argument.}

\item{fn_id}{Optional id to uniquely identify the function. By default,
rflow functions reuse the \code{cache} if the same function is given. The id 
allows the user to suppress console messages and to explicitly
indicate whether to reuse the old cache or create a new one.}

\item{flow_options}{List of options created using \code{get_flow_options}.}
}
\value{
The flow object.
}
\description{
Row-wise caching of operations on data frame.
}
\details{
Function \code{fn} operates on a data frame received as argument.
  \code{fn} will receive only the rows changed; 
  it may drop some of the rows, but will not add any new rows.
  The function \code{fn} may return fewer or more columns or modify 
  existing columns as long it always returns a consistent schema
  (i.e., the same column data types and names) for all calls. 
  The data frame \code{df} passed to \code{fn} will include one 
  additional column \code{..row_hash..} that must be returned as is in 
  order to identify changes.
  
  Arguments \code{fn}, \code{fn_id} and \code{flow_options}, when provided,
  must be named. Argument \code{fn} must be always provided.
}
\examples{
df_fn <- function(df, i = NULL) {
if (is.null(i)) {
   dfi <- df
   dfi$rm <- rowMeans(dfi[1:10])
  } else {
   dfi <- df[i, , drop = FALSE]
  }
dfi
}

dfr_flow <- flow_dfr(mtcars, 1, fn = df_fn)
collected_dfr <- dfr_flow \%>\%
             collect()

}
